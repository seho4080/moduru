services:
  ##########################################
  # 1. LiveKit 서버
  ##########################################
  livekit:
    image: livekit/livekit-server
    expose:
      - "7880"
    ports:
      - "7881:7881"
      - "7882:7882/udp"
      - "30000-30010:30000-30010/udp"
    environment:
      LIVEKIT_KEYS: "APIExfXARpQDyLR: aiMU5fnfvAXXRATTtf8i3lLSghwiqPNA7RznUlKIqmtA"
      LIVEKIT_UDP_PORT: "7882"
      LIVEKIT_UDP_PORT_RANGE: "30000-30010"
      LIVEKIT_PUBLIC_IP: "3.34.53.245"
      LIVEKIT_STUN_URIS: "stun:stun.l.google.com:19302"
      LIVEKIT_WEBHOOK_URLS: "http://node-backend:4000/livekit/webhook"
    command: ["--bind", "0.0.0.0"]
    networks:
      - app-network
  ##########################################
  # 2. 프론트엔드 (React/Vite 등)
  ##########################################
  frontend:
    build:
      context: ./front/moduru
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    # volumes:
      # - ./front/moduru:/app
      # - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
    networks:
      - app-network
  ##########################################  
  # 3. DB (postgresql)
  ##########################################
  db:
    image: pgvector/pgvector:pg16
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ssafy
      POSTGRES_DB: mydb
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data     # 데이터 저장 할 장소
      # - ./insert-data:/docker-entrypoint-initdb.d   # init 스크립트 자동 실행
    networks:
      - app-network   # 이렇게 바꾸기!
  ##########################################
  # 4. 백엔드 (Spring Boot)
  ##########################################
  backend:
    build:
      context: ./back
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    container_name: backend
    # restart: always
    env_file: .env
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - KAKAO_CLIENT_ID=${KAKAO_CLIENT_ID}
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/mydb
      - SPRING_DATASOURCE_USERNAME=${postgresql_user}
      - SPRING_DATASOURCE_PASSWORD=${postgresql_password}
      - EMAIL_ID=lhjlizzie@gmail.com
      - EMAIL_PASSWORD="hsml ohoh wpix homy"
      - KAKAO_API_KEY=${KAKAO_API_KEY}
    depends_on:
      redis:
        condition: service_healthy
      elasticsearch:
          condition: service_healthy
    networks:
      - app-network
  ##########################################
  # 5. 백엔드 (Node.js)
  ##########################################
  node-backend:
    build:
      context: ./back-node
    ports:
      - "4000:4000"  # Node.js 앱이 사용하는 포트로 수정
    # volumes:
      # - ./back-node:/app
      # - /app/node_modules
    env_file: .env
    environment:
      # 기존 DB, LIVEKIT_* 그대로 두시고
      - REDIS_HOST=redis        # ← 여기
      - REDIS_PORT=6379
    depends_on:
      # - db
      - redis
    restart: always
    networks:
      - app-network
  ##########################################
  # 6. 백엔드 (redis)
  ##########################################
  redis:
    image: redis:7.2
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --save "" --appendonly no
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app-network

  ##########################################
  # 7. 검색(es)
  ##########################################
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.1
    container_name: elasticsearch
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./volumes/elasticsearch/data:/usr/share/elasticsearch/data
    networks:
      - app-network
  ##########################################
  # 8. 데이터 넣을 파이썬 코드
  ##########################################
  data-loader:
    image: python:3.11-slim
    container_name: data_loader
    working_dir: /app
    volumes:
      - ./insert-data/insert_data:/app         # 스크립트가 있는 로컬 폴더
    depends_on:
      - db
    networks:
      - app-network
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: "5432"
      POSTGRES_DB: mydb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ssafy
    # command: ["python", "insert_data_docker.py"]  # 스크립트 이름
    command: >
        sh -c "set -x && \
              pip install psycopg2-binary pgvector && \
              python insert_data_docker.py && \
              python festival_data_docker.py && \
              sleep 300"
# python spot_data_docker.py && \      

  ##########################################
  # 9. nginx(리버스 프록시)
  ##########################################
  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/tripwish.conf:/etc/nginx/conf.d/default.conf:ro
      - ./front/moduru/dist:/usr/share/nginx/html:ro
      - /etc/letsencrypt/live/moduru.co.kr:/etc/letsencrypt/live/moduru.co.kr:ro
      - /etc/letsencrypt/archive/moduru.co.kr:/etc/letsencrypt/archive/moduru.co.kr:ro
    depends_on:
      - backend
    networks:
      - app-network
networks:
  app-network:
volumes:
  pgdata:
version: "3.8"

services:
  ##########################################
  # 1. LiveKit 서버
  ##########################################
  livekit:
    image: livekit/livekit-server
    ports:
      - "7880:7880"                     # WebSocket signaling
      - "7881:7881"                     # ICE TCP
      - "7882:7882/udp"                 # ICE UDP
      - "30000-30010:30000-30010/udp"   # Media UDP 포트 범위
    environment:
      - LIVEKIT_API_KEY=devkey
      - LIVEKIT_API_SECRET=secret
      - LIVEKIT_UDP_PORT=7882
      - LIVEKIT_UDP_PORT_RANGE=30000-30010
      - LIVEKIT_PUBLIC_IP=host.docker.internal  # 로컬 개발용
      - LIVEKIT_STUN_URIS=stun:stun.l.google.com:19302
      - LIVEKIT_WEBHOOK_URLS=http://host.docker.internal:3001/webhook/livekit
    command: ["--dev", "--bind", "0.0.0.0"]
    networks:
      - app-network
  ##########################################
  # 2. 프론트엔드 (node-test)
  ##########################################
  
  # front-node:
  #   build:
  #     context: ./front-node
  #     dockerfile: Dockerfile
  #   volumes:
  #     - ./front-node:/app      # 코드 변경 즉시 반영
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - CHOKIDAR_USEPOLLING=true  # 필요시 파일 변경 감지 옵션
  #   depends_on:
  #     - backend                  # (optional) 백엔드 서비스 이름
  #   networks:
  #     - app-network



  ##########################################
  # 2. 프론트엔드 (React/Vite 등)
  ##########################################
  frontend:
    build:
      context: ./front/moduru
    ports:
      - "5173:5173"
    volumes:
      - ./front/moduru:/app
      # - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
    networks:
      - app-network

  ##########################################
  # 4. 백엔드 (Spring Boot)
  ##########################################
  backend:
    build:
      context: ./back
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    container_name: backend
    restart: always
    env_file: .env
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - KAKAO_CLIENT_ID=${KAKAO_CLIENT_ID}
      - postgresql_user=${postgresql_user}
      - postgresql_password=${postgresql_password}
      # - REDIS_HOST=redis        # ← 여기
      # - REDIS_PORT=6379
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5432/postgres
      - SPRING_DATASOURCE_USERNAME=${postgresql_user}
      - SPRING_DATASOURCE_PASSWORD=${postgresql_password}

    depends_on:
      redis:
        condition: service_healthy
      elasticsearch:
          condition: service_healthy
    networks:
      - app-network
  ##########################################
  # 5. 백엔드 (Node.js)
  ##########################################
  node-backend:
    build:
      context: ./back-node
    ports:
      - "4000:4000"  # Node.js 앱이 사용하는 포트로 수정
    # volumes:
      # - ./back-node:/app
      # - /app/node_modules
    env_file: .env
    environment:
      # 기존 DB, LIVEKIT_* 그대로 두시고
      - REDIS_HOST=redis        # ← 여기
      - REDIS_PORT=6379
    depends_on:
      # - db
      - redis
    restart: always
    networks:
      - app-network
  ##########################################
  # 6. 백엔드 (redis)
  ##########################################
  redis:
    image: redis:7.2
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --save "" --appendonly no
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app-network

  ##########################################
  # 7. 검색(es)
  ##########################################
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.7.1
    container_name: elasticsearch
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./volumes/elasticsearch/data:/usr/share/elasticsearch/data
    networks:
      - app-network

networks:
  app-network:
